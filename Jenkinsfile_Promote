pipeline {
  agent {
    kubernetes {
      yaml """\
      apiVersion: v1
      kind: Pod
      metadata:
        labels:
          builder: promotion
      spec:
        serviceAccountName: jenkins-agent
        containers:
        - name: awscli
          image: amazon/aws-cli
          command:
          - cat
          tty: true
      """.stripIndent()
    }
  }
  stages {
    stage('Function Test before promote') {
      steps {
        script {
          sh """
          curl https://c388team06dev.computerlab.online/
          curl https://c388team06dev-api.computerlab.online/
          """
        }
      }
    }

    stage('Promote to Production') {
      steps {
        container(name: 'awscli') {
          script {
            buildNumber = Jenkins.instance.getItem(projectName).lastSuccessfulBuild.number
          }
          sh '''
          export AWS_DEFAULT_REGION=us-east-1
          imgNum=''' + buildNumber + '''
          
          # Function to check if an image exists in the ECR repository
          check_image_exists() {
            image_name=$1
            aws ecr describe-images --repository-name production-support-course --image-ids imageTag=$image_name > /dev/null 2>&1
            echo $?
          }

          # Check if API image exists
          if [ $(check_image_exists "${imageAPIDevName}${imgNum}") -ne 0 ]; then
            echo "API image does not exist. Exiting..."
            exit 1
          fi

          # Check if DB image exists
          if [ $(check_image_exists("${imageDBDevName}${imgNum}") -ne 0 ]; then
            echo "DB image does not exist. Exiting..."
            exit 1
          fi

          # Check if FE image exists
          if [ $(check_image_exists("${imageFEDevName}${imgNum}") -ne 0 ]; then
            echo "FE image does not exist. Exiting..."
            exit 1
          fi

          # Check if SSH image exists
          if [ $(check_image_exists("${imageSSHDevName}${imgNum}") -ne 0 ]; then
            echo "SSH image does not exist. Exiting..."
            exit 1
          fi

          # Get the image manifests
          APIMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageAPIDevName}${imgNum} --query 'images[].imageManifest' --output text)
          DBMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageDBDevName}${imgNum} --query 'images[].imageManifest' --output text)
          FEMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageFEDevName}${imgNum} --query 'images[].imageManifest' --output text)
          SSHMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${imageSSHDevName}${imgNum} --query 'images[].imageManifest' --output text)

          exitvalue=0

          # Check API
          if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageAPIProdName}${imgNum}" | wc -l) -eq 0 ]; then
            if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageAPIProdName}${imgNum} --image-manifest "$APIMANIFEST"; then
              exitvalue=1
            fi
          fi

          # Check DB
          if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageDBProdName}${imgNum}" | wc -l) -eq 0 ]; then
            if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageDBProdName}${imgNum} --image-manifest "$DBMANIFEST"; then
              exitvalue="${exitvalue}2"
            fi
          fi

          # Check Front End
          if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageFEProdName}${imgNum}" | wc -l) -eq 0 ]; then
            if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageFEProdName}${imgNum} --image-manifest "$FEMANIFEST"; then
              exitvalue=3
            fi
          fi

          # Check SSH
          if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageSSHProdName}${imgNum}" | wc -l) -eq 0 ]; then
            if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageSSHProdName}${imgNum} --image-manifest "$SSHMANIFEST"; then
              exitvalue="${exitvalue}4"
            fi
          fi

          case ${exitvalue} in
            0) echo "Update OK" ;;
            1) echo "API failed to push to repository" ;;
            2) echo "DB failed to push to repository" ;;
            3) echo "FE failed to push to repository" ;;
            4) echo "SSH failed to push to repository" ;;
            12) echo "API and DB failed to push to repository" ;;
            13) echo "API and FE failed to push to repository" ;;
            14) echo "API and SSH failed to push to repository" ;;
            23) echo "DB and FE failed to push to repository" ;;
            24) echo "DB and SSH failed to push to repository" ;;
            34) echo "FE and SSH failed to push to repository" ;;
            123) echo "API, DB, and FE failed to push to repository" ;;
            124) echo "API, DB, and SSH failed to push to repository" ;;
            134) echo "API, FE, and SSH failed to push to repository" ;;
            234) echo "DB, FE, and SSH failed to push to repository" ;;
            1234) echo "All images failed to push to repository" ;;
          esac

          exit ${exitvalue}
          '''
        }
      }
    }
  }
  environment {
    ECR_REPO = '108174090253.dkr.ecr.us-east-1.amazonaws.com/production-support-course'

    imageAPIDevName = 'c388team06api-dev-'
    imageAPIProdName = 'c388team06api-prod-'
    imageDBDevName = 'c388team06db-dev-'
    imageDBProdName = 'c388team06db-prod-'
    imageFEDevName = 'c388team06fe-dev-'
    imageFEProdName = 'c388team06fe-prod-'
    imageSSHDevName = 'c388team06ssh-dev-'
    imageSSHProdName = 'c388team06ssh-prod-'
    projectName = 'c388team06'
  }
}
